{"version":3,"sources":["components/SearchBar.js","components/DayCard.js","components/DayDetails.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","_ref","searchTerm","handleFormSubmit","handleInputChange","react_default","a","createElement","Form","inline","onSubmit","FormGroup","Label","for","hidden","Input","type","name","id","placeholder","onChange","value","Button","gray","border","concat","tealBorder","DayWrapper","styled","article","_templateObject","props","isActive","DayCard","day","temp","icon","description","high","low","precip","setSelectedDay","onClick","Card","CardHeader","CardBody","toFixed","src","process","alt","DetailsWrapper","DayDetails_templateObject","DayDetails","appHigh","appLow","humidity","windDire","windSpd","API","getWeather","location","axios","get","App","_useState","useState","days","selectedDay","_useState2","Object","slicedToArray","weatherInfo","setWeatherInfo","weatherSearch","then","data","city_name","state_code","catch","err","console","log","useEffect","Container","Row","Col","md","components_SearchBar","e","objectSpread","target","preventDefault","map","key","valid_date","components_DayCard","weather","high_temp","low_temp","pop","moment","format","components_DayDetails","rh","app_max_temp","app_min_temp","windDir","wind_cdir","wind_spd","Boolean","window","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b758fe27.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\r\n\r\n\r\nconst SearchBar = ({ searchTerm, handleFormSubmit, handleInputChange }) => {\r\n    return (\r\n        <Form inline onSubmit={handleFormSubmit}>\r\n            <FormGroup>\r\n                <Label for=\"location\" hidden>Location</Label>\r\n                <Input \r\n                type=\"text\" \r\n                name=\"location\" \r\n                id=\"location\" \r\n                placeholder=\"Denver, CO\" \r\n                onChange={handleInputChange}\r\n                value={searchTerm}\r\n                />\r\n            </FormGroup>\r\n            <Button>Search</Button>\r\n        </Form>\r\n    )\r\n}\r\nexport default SearchBar;","import React from 'react';\r\nimport { Card, CardHeader, CardBody } from \"reactstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nconst gray = \"rgba(0,0,0,.125)\";\r\nconst teal = \"teal\";\r\nconst border = `2px solid ${gray}`;\r\nconst tealBorder = `2px solid ${teal}`;\r\n\r\nconst DayWrapper =  styled.article`\r\n    text-align: center;\r\n    :hover {\r\n        cursor: pointer;\r\n        .card {\r\n            border: ${tealBorder};\r\n        }\r\n    }\r\n\r\n    img {\r\n        padding-bottom: 15px;\r\n        width: 85px;\r\n    }\r\n    .card {\r\n        border: ${props => props.isActive ? tealBorder : border};\r\n    }\r\n    .card-header {\r\n        background: ${props => props.isActive ? teal : gray};\r\n        border-bottom: ${border};\r\n        color: ${props => props.isActive ? \"white\" : null};\r\n    }\r\n    .card-body {\r\n        padding: 20px 10px;\r\n    }\r\n`\r\n\r\nconst DayCard = ({ day, temp, icon, description, high, low, precip, setSelectedDay, isActive }) => {\r\n    return (\r\n    <DayWrapper onClick={setSelectedDay} isActive={isActive}>\r\n        <Card>\r\n            <CardHeader>{day}</CardHeader>\r\n            <CardBody>\r\n                <h2>{temp.toFixed(0)}°</h2>\r\n                <img src={`${process.env.PUBLIC_URL}/icons/${icon}.png`} alt={description} />\r\n                <p><strong>High:</strong> {high.toFixed(0)}°</p>\r\n                <p><strong>Low:</strong> {low.toFixed(0)}°</p>\r\n                <p><strong>Precip:</strong> {precip}%</p>\r\n            </CardBody>\r\n        </Card>\r\n    </DayWrapper>\r\n    )\r\n}\r\nexport default DayCard;","import React from 'react';\r\nimport { Card, CardBody } from \"reactstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nconst DetailsWrapper = styled(Card)`\r\n    margin: 15px 0;\r\n    border: 2px solid teal;\r\n    text-align: center;\r\n`\r\n\r\nconst DayDetails = ({ appHigh, appLow, day, description, high, humidity, icon, low, precip, temp, windDire, windSpd }) => {\r\n    return (\r\n    <DetailsWrapper>\r\n        <CardBody>\r\n            <h2>Weather Details for  {day}</h2>\r\n            <h2>{temp.toFixed(0)}°</h2>\r\n            <img src={`${process.env.PUBLIC_URL}/icons/${icon}.png`} alt={description} />\r\n            <p><strong>High:</strong> {high.toFixed(0)}° (Feels like: {appHigh.toFixed(0)}°)</p>\r\n            <p><strong>Low:</strong> {low.toFixed(0)}° (Feels like: {appLow.toFixed(0)}°)</p>\r\n            <p><strong>Precip:</strong> {precip}% | <strong>Humidy:</strong> {humidity}%</p>\r\n        </CardBody>\r\n    </DetailsWrapper>\r\n    )\r\n}\r\nexport default DayDetails;","import axios from \"axios\";\r\nconst weatherKey = process.env.REACT_APP_WEATHERBIT_KEY;\r\n\r\n\r\nexport default {\r\n    getWeather: function(location) {\r\n        return axios.get(`https://api.weatherbit.io/v2.0/forecast/daily?city=${location}&days=7&units=I&key=${weatherKey}`);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport sampleData from \"./data/sample.json\";\nimport SearchBar from \"./components/SearchBar\";\nimport DayCard  from \"./components/DayCard\";\nimport DayDetails from \"./components/DayDetails\";\nimport moment from \"moment\";\nimport API from \"./utils/API\";\n\nfunction App() {\n  const [weatherInfo, setWeatherInfo] = useState({\n    location:\"\",\n    days: [],\n    selectedDay: null,\n    searchTerm: \"\"\n  });\n\n  const { location, days, selectedDay, searchTerm } = weatherInfo;\n\n  const weatherSearch = location => {\n    API.getWeather(location)\n      .then(({ data }) => setWeatherInfo({\n        location: data.city_name + \", \" + data.state_code,\n        days: data.data,\n        selectedDay: null,\n        searchTerm:\"\"\n      }))\n      .catch(err => console.log(err));\n  }\n\n  useEffect(() => {\n    weatherSearch(\"Denver,CO\");\n  }, []); //componentDidMount\n\n  const handleInputChange = e => {\n    setWeatherInfo({\n      ...weatherInfo, searchTerm: e.target.value\n    });\n  }\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    weatherSearch(searchTerm);\n  }\n\n  return (\n    <Container>\n        <Row>\n          <Col md={7}><h2>Weather for {location}</h2></Col>\n            <Col md={5}>\n              <SearchBar \n                searchTerm={searchTerm}\n                handleInputChange={handleInputChange}\n                handleFormSubmit={handleFormSubmit}\n              />\n            </Col>\n        </Row>\n        <Row>\n            {days.map(day => (\n              <Col key={day.valid_date}>\n                <DayCard \n                  icon={day.weather.icon}\n                  description={day.weather.description}\n                  high={day.high_temp}\n                  low={day.low_temp}\n                  temp={day.temp}\n                  precip={day.pop}\n                  day={moment(day.valid_date, \"YYYY-MM-DD\").format(\"dddd\")}\n                  setSelectedDay={() => setWeatherInfo({ ...weatherInfo, selectedDay: day })}\n                  isActive={day === selectedDay} \n                />\n              </Col>\n            ))}\n        </Row>\n        <Row>\n          <Col>\n            {selectedDay ? (\n              <DayDetails \n                icon={selectedDay.weather.icon}\n                description={selectedDay.weather.description}\n                high={selectedDay.high_temp}\n                low={selectedDay.low_temp}\n                temp={selectedDay.temp}\n                precip={selectedDay.pop}\n                day={moment(selectedDay.valid_date, \"YYYY-MM-DD\").format(\"lll\")}\n                humidity={selectedDay.rh}\n                appHigh={selectedDay.app_max_temp}\n                appLow={selectedDay.app_min_temp}\n                windDir={selectedDay.wind_cdir}\n                windSpd={selectedDay.wind_spd}\n              />\n            ) : (\n              <h3>Click on a Day to get details</h3>\n            )}\n          </Col>\n        </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}